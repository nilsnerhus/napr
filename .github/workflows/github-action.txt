name: Update NAP Data

on:
  schedule:
    # Run monthly on the 1st at 3:00 AM UTC
    - cron: '0 3 1 * *'
  workflow_dispatch:  # Allow manual triggering from GitHub interface

jobs:
  update-nap-data:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RENV_PATHS_ROOT: ~/.local/share/renv
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
      
      - name: Install system dependencies for pdftools
        run: |
          sudo apt-get update
          sudo apt-get install -y libpoppler-cpp-dev libcurl4-openssl-dev
      
      - name: Cache renv packages
        uses: actions/cache@v3
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
          restore-keys: |
            ${{ runner.os }}-renv-
      
      - name: Restore and install R packages using renv
        run: |
          install.packages("renv")
          renv::restore()
        shell: Rscript {0}
      
      - name: Process fresh NAP data
        run: |
          Rscript -e '
          # Make sure renv is active
          source(".Rprofile")
          
          # Load the package
          library(napunfccc)
          
          # Create directory for cache
          cache_dir <- ".github/nap_cache"
          if (!dir.exists(cache_dir)) {
            dir.create(cache_dir, recursive = TRUE)
          }
          
          # Process fresh NAP data
          message("Processing fresh NAP data...")
          nap_data <- get_naps_fresh(cache_dir = cache_dir)
          
          # Save as package data
          message("Saving processed data...")
          usethis::use_data(nap_data, overwrite = TRUE)
          
          # Update documentation for the data
          message("Updating documentation...")
          timestamp <- format(Sys.time(), "%Y-%m-%d")
          
          # Add timestamp to the data documentation
          data_file <- "R/data.R"
          data_content <- readLines(data_file)
          for (i in seq_along(data_content)) {
            if (grepl("@note Last updated:", data_content[i])) {
              data_content[i] <- paste0("#\' @note Last updated: ", timestamp)
              break
            }
          }
          writeLines(data_content, data_file)
          
          # Document the package
          devtools::document()
          '
      
      - name: Commit and push changes
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          
          git add data/nap_data.rda R/data.R man/nap_data.Rd
          
          timestamp=$(date +"%Y-%m-%d")
          git commit -m "Update NAP data: ${timestamp}" || echo "No changes to commit"
          
          git push origin || echo "No changes to push"